
Interrupt1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000aa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000fe  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000130  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000584  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000511  00000000  00000000  00000718  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001ed  00000000  00000000  00000c29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000e18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002ef  00000000  00000000  00000e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000003c  00000000  00000000  0000114b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001187  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_2>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 45 00 	call	0x8a	; 0x8a <main>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_2>:
#include <avr/io.h>
#include <avr/interrupt.h> //STEP1

ISR(INT1_vect)//STEP2
{
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	8f 93       	push	r24
	PORTB = ~PORTB;
  78:	88 b3       	in	r24, 0x18	; 24
  7a:	80 95       	com	r24
  7c:	88 bb       	out	0x18, r24	; 24
}
  7e:	8f 91       	pop	r24
  80:	0f 90       	pop	r0
  82:	0f be       	out	0x3f, r0	; 63
  84:	0f 90       	pop	r0
  86:	1f 90       	pop	r1
  88:	18 95       	reti

0000008a <main>:
int main(void)
{
	DDRB = 0xFF;
  8a:	8f ef       	ldi	r24, 0xFF	; 255
  8c:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b01010101;
  8e:	85 e5       	ldi	r24, 0x55	; 85
  90:	88 bb       	out	0x18, r24	; 24
	GICR = (1 << INT1); //STEP3
  92:	80 e8       	ldi	r24, 0x80	; 128
  94:	8b bf       	out	0x3b, r24	; 59
	MCUCR = MCUCR | (1 << ISC11);//STEP4 (setting 10 here)
  96:	85 b7       	in	r24, 0x35	; 53
  98:	88 60       	ori	r24, 0x08	; 8
  9a:	85 bf       	out	0x35, r24	; 53
	MCUCR = MCUCR & (~(1 << ISC10));//STEP4
  9c:	85 b7       	in	r24, 0x35	; 53
  9e:	8b 7f       	andi	r24, 0xFB	; 251
  a0:	85 bf       	out	0x35, r24	; 53
	sei();//STEP5
  a2:	78 94       	sei
  a4:	ff cf       	rjmp	.-2      	; 0xa4 <main+0x1a>

000000a6 <_exit>:
  a6:	f8 94       	cli

000000a8 <__stop_program>:
  a8:	ff cf       	rjmp	.-2      	; 0xa8 <__stop_program>
