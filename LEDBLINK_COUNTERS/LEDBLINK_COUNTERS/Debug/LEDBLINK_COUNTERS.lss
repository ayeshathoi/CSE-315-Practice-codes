
LEDBLINK_COUNTERS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000114  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000144  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000626  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000593  00000000  00000000  000007c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000296  00000000  00000000  00000d59  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000ff0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000343  00000000  00000000  00001014  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000074  00000000  00000000  00001357  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000013cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5e 00 	jmp	0xbc	; 0xbc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define F_CPU 1000000
#include <util/delay.h>

int main(void)
{
    DDRB = 0x01;//ledBlink
  6c:	81 e0       	ldi	r24, 0x01	; 1
  6e:	87 bb       	out	0x17, r24	; 23
	unsigned char c = 1; //ledBlink
	
	DDRA = 0xFF; //ring Counter
  70:	8f ef       	ldi	r24, 0xFF	; 255
  72:	8a bb       	out	0x1a, r24	; 26
	unsigned char check = 0x01; //ring counter
	
	DDRC = 0xFF;
  74:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xFE;
  76:	8e ef       	ldi	r24, 0xFE	; 254
  78:	81 bb       	out	0x11, r24	; 17
	MCUCSR = 1<<JTD;
  7a:	80 e8       	ldi	r24, 0x80	; 128
  7c:	84 bf       	out	0x34, r24	; 52
	MCUCSR = 1<<JTD;
  7e:	84 bf       	out	0x34, r24	; 52
	unsigned char inc ;
	unsigned char ch = 0;
	PORTC = ch;
  80:	15 ba       	out	0x15, r1	; 21
	DDRC = 0xFF;
	DDRD = 0xFE;
	MCUCSR = 1<<JTD;
	MCUCSR = 1<<JTD;
	unsigned char inc ;
	unsigned char ch = 0;
  82:	20 e0       	ldi	r18, 0x00	; 0
{
    DDRB = 0x01;//ledBlink
	unsigned char c = 1; //ledBlink
	
	DDRA = 0xFF; //ring Counter
	unsigned char check = 0x01; //ring counter
  84:	81 e0       	ldi	r24, 0x01	; 1
#include <util/delay.h>

int main(void)
{
    DDRB = 0x01;//ledBlink
	unsigned char c = 1; //ledBlink
  86:	91 e0       	ldi	r25, 0x01	; 1
	PORTC = ch;
	
	
    while (1) 
    {
		PORTB = c; //ledBlink
  88:	98 bb       	out	0x18, r25	; 24
		if(c) c = 0; //ledBlink
  8a:	99 23       	and	r25, r25
  8c:	11 f0       	breq	.+4      	; 0x92 <main+0x26>
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	01 c0       	rjmp	.+2      	; 0x94 <main+0x28>
		else  c = 1;//ledBlink
  92:	91 e0       	ldi	r25, 0x01	; 1
		
		PORTA = check;//ring counter
  94:	8b bb       	out	0x1b, r24	; 27
		if(check == 1<<7) check =1 ;//ring counter
  96:	80 38       	cpi	r24, 0x80	; 128
  98:	11 f0       	breq	.+4      	; 0x9e <main+0x32>
		else check =check<<1;//ring counter
  9a:	88 0f       	add	r24, r24
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <main+0x34>
		PORTB = c; //ledBlink
		if(c) c = 0; //ledBlink
		else  c = 1;//ledBlink
		
		PORTA = check;//ring counter
		if(check == 1<<7) check =1 ;//ring counter
  9e:	81 e0       	ldi	r24, 0x01	; 1
		else check =check<<1;//ring counter
		
		//simple counter
		inc = PIND;
		if (inc & 0x01 )
  a0:	80 9b       	sbis	0x10, 0	; 16
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <main+0x3c>
		{
			ch++;
  a4:	2f 5f       	subi	r18, 0xFF	; 255
			PORTC = ch;
  a6:	25 bb       	out	0x15, r18	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	3f e3       	ldi	r19, 0x3F	; 63
  aa:	4d e0       	ldi	r20, 0x0D	; 13
  ac:	53 e0       	ldi	r21, 0x03	; 3
  ae:	31 50       	subi	r19, 0x01	; 1
  b0:	40 40       	sbci	r20, 0x00	; 0
  b2:	50 40       	sbci	r21, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <main+0x42>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <main+0x4c>
  b8:	00 00       	nop
  ba:	e6 cf       	rjmp	.-52     	; 0x88 <main+0x1c>

000000bc <_exit>:
  bc:	f8 94       	cli

000000be <__stop_program>:
  be:	ff cf       	rjmp	.-2      	; 0xbe <__stop_program>
