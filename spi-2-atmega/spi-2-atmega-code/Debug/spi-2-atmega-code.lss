
spi-2-atmega-code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000be  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000112  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000112  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000144  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000688  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005a3  00000000  00000000  00000858  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a7  00000000  00000000  00000dfb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  000010a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000343  00000000  00000000  00001128  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000013  00000000  00000000  0000146b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  0000147e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 56 00 	call	0xac	; 0xac <main>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SPI_MasterInit>:
#include <avr/io.h>

void SPI_MasterInit(void)
{
	/* Set MOSI, SCK and SS output, all others input */
	DDRB = (1<<DDB5)|(1<<DDB7);
  6c:	80 ea       	ldi	r24, 0xA0	; 160
  6e:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
  70:	81 e5       	ldi	r24, 0x51	; 81
  72:	8d b9       	out	0x0d, r24	; 13
  74:	08 95       	ret

00000076 <SPI_SlaveInit>:
}

void SPI_SlaveInit(void)
{
	/* Set MISO output, all others input */
	DDRB = (1<<DDB6);
  76:	80 e4       	ldi	r24, 0x40	; 64
  78:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI */
	SPCR = (1<<SPE);
  7a:	8d b9       	out	0x0d, r24	; 13
  7c:	08 95       	ret

0000007e <SPI_Transmit>:
}

void SPI_Transmit(char cData)
{
	/* Start transmission */
	SPDR = cData;
  7e:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
  80:	77 9b       	sbis	0x0e, 7	; 14
  82:	fe cf       	rjmp	.-4      	; 0x80 <SPI_Transmit+0x2>
}
  84:	08 95       	ret

00000086 <SPI_Receive>:

char SPI_Receive(void)
{
	/* Wait for reception complete */
	while(!(SPSR & (1<<SPIF)));
  86:	77 9b       	sbis	0x0e, 7	; 14
  88:	fe cf       	rjmp	.-4      	; 0x86 <SPI_Receive>
	/* Return data register */
	return SPDR;
  8a:	8f b1       	in	r24, 0x0f	; 15
}
  8c:	08 95       	ret

0000008e <master_main>:



void master_main()
{
	DDRA = 0x00;
  8e:	1a ba       	out	0x1a, r1	; 26
	SPI_MasterInit();
  90:	0e 94 36 00 	call	0x6c	; 0x6c <SPI_MasterInit>
	while(1)
	{
		char data = PINA;
  94:	89 b3       	in	r24, 0x19	; 25
		SPI_Transmit(data);
  96:	0e 94 3f 00 	call	0x7e	; 0x7e <SPI_Transmit>
  9a:	fc cf       	rjmp	.-8      	; 0x94 <master_main+0x6>

0000009c <slave_main>:
	}
}

void slave_main()
{
	DDRA = 0xFF;
  9c:	8f ef       	ldi	r24, 0xFF	; 255
  9e:	8a bb       	out	0x1a, r24	; 26
	SPI_SlaveInit();
  a0:	0e 94 3b 00 	call	0x76	; 0x76 <SPI_SlaveInit>
	while(1)
	{
		char data = SPI_Receive();
  a4:	0e 94 43 00 	call	0x86	; 0x86 <SPI_Receive>
		PORTA = data;
  a8:	8b bb       	out	0x1b, r24	; 27
  aa:	fc cf       	rjmp	.-8      	; 0xa4 <slave_main+0x8>

000000ac <main>:
}


int main(void)
{
    DDRC = 0x00;
  ac:	14 ba       	out	0x14, r1	; 20
	if(PINC) {
  ae:	83 b3       	in	r24, 0x13	; 19
  b0:	81 11       	cpse	r24, r1
		master_main();
  b2:	0e 94 47 00 	call	0x8e	; 0x8e <master_main>
	}
	else
	{
		slave_main();
  b6:	0e 94 4e 00 	call	0x9c	; 0x9c <slave_main>

000000ba <_exit>:
  ba:	f8 94       	cli

000000bc <__stop_program>:
  bc:	ff cf       	rjmp	.-2      	; 0xbc <__stop_program>
