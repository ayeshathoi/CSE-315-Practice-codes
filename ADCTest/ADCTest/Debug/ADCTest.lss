
ADCTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000108  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000138  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000059e  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000520  00000000  00000000  00000732  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001eb  00000000  00000000  00000c52  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000e40  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f3  00000000  00000000  00000e64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000013  00000000  00000000  00001157  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000116a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>


int main(void)
{
	DDRB = 0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	87 bb       	out	0x17, r24	; 23
	unsigned char result;
	
	ADMUX = 0b01100000;
  70:	80 e6       	ldi	r24, 0x60	; 96
  72:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0b10000001;
  74:	81 e8       	ldi	r24, 0x81	; 129
  76:	86 b9       	out	0x06, r24	; 6
	
    while (1) 
    {
		ADCSRA |=(1<<ADSC);
  78:	86 b1       	in	r24, 0x06	; 6
  7a:	80 64       	ori	r24, 0x40	; 64
  7c:	86 b9       	out	0x06, r24	; 6
		while (ADCSRA & 1<<ADSC) ; 
  7e:	36 99       	sbic	0x06, 6	; 6
  80:	fe cf       	rjmp	.-4      	; 0x7e <main+0x12>
		
		result = ADCH;//error will occur a little bit
  82:	85 b1       	in	r24, 0x05	; 5
		float voltage = (result << 2) * 5/1024;
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	88 0f       	add	r24, r24
  88:	99 1f       	adc	r25, r25
  8a:	88 0f       	add	r24, r24
  8c:	99 1f       	adc	r25, r25
  8e:	9c 01       	movw	r18, r24
  90:	22 0f       	add	r18, r18
  92:	33 1f       	adc	r19, r19
  94:	22 0f       	add	r18, r18
  96:	33 1f       	adc	r19, r19
  98:	82 0f       	add	r24, r18
  9a:	93 1f       	adc	r25, r19
  9c:	9c 01       	movw	r18, r24
  9e:	99 23       	and	r25, r25
  a0:	14 f4       	brge	.+4      	; 0xa6 <main+0x3a>
  a2:	21 50       	subi	r18, 0x01	; 1
  a4:	3c 4f       	sbci	r19, 0xFC	; 252
  a6:	83 2f       	mov	r24, r19
  a8:	85 95       	asr	r24
  aa:	85 95       	asr	r24
		PORTB = voltage;
  ac:	88 bb       	out	0x18, r24	; 24
    }
  ae:	e4 cf       	rjmp	.-56     	; 0x78 <main+0xc>

000000b0 <_exit>:
  b0:	f8 94       	cli

000000b2 <__stop_program>:
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <__stop_program>
