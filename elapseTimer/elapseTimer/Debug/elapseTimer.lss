
elapseTimer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000012a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000019e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  0000019e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000019e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005da  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000544  00000000  00000000  0000080e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000235  00000000  00000000  00000d52  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00000f88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000031e  00000000  00000000  00000fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000af  00000000  00000000  000012fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000013a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_9>:
#include <avr/interrupt.h>

volatile uint32_t overflowCount;

ISR(TIMER1_OVF_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25
  8a:	af 93       	push	r26
  8c:	bf 93       	push	r27
	overflowCount++;
  8e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  92:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  96:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
  9a:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
  9e:	01 96       	adiw	r24, 0x01	; 1
  a0:	a1 1d       	adc	r26, r1
  a2:	b1 1d       	adc	r27, r1
  a4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  a8:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  ac:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
  b0:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
}
  b4:	bf 91       	pop	r27
  b6:	af 91       	pop	r26
  b8:	9f 91       	pop	r25
  ba:	8f 91       	pop	r24
  bc:	0f 90       	pop	r0
  be:	0f be       	out	0x3f, r0	; 63
  c0:	0f 90       	pop	r0
  c2:	1f 90       	pop	r1
  c4:	18 95       	reti

000000c6 <main>:
int main(void)
{
    int i,j;
	uint32_t elapsed_time;
	
	TCCR1A = 0b00000000;
  c6:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0b00000001;
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	8e bd       	out	0x2e, r24	; 46
	TIMSK  = 0b00000100;
  cc:	84 e0       	ldi	r24, 0x04	; 4
  ce:	89 bf       	out	0x39, r24	; 57
	
	overflowCount=0;
  d0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
  d4:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  d8:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
  dc:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
	TCNT1 = 1;
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	9d bd       	out	0x2d, r25	; 45
  e6:	8c bd       	out	0x2c, r24	; 44
	
	sei();
  e8:	78 94       	sei
	for (i=0;i<100;i++)
  ea:	20 e0       	ldi	r18, 0x00	; 0
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	0a c0       	rjmp	.+20     	; 0x104 <main+0x3e>
	{
		for (j=0;j<1000;j++)
  f0:	01 96       	adiw	r24, 0x01	; 1
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <main+0x32>
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	88 3e       	cpi	r24, 0xE8	; 232
  fa:	43 e0       	ldi	r20, 0x03	; 3
  fc:	94 07       	cpc	r25, r20
  fe:	c4 f3       	brlt	.-16     	; 0xf0 <main+0x2a>
	
	overflowCount=0;
	TCNT1 = 1;
	
	sei();
	for (i=0;i<100;i++)
 100:	2f 5f       	subi	r18, 0xFF	; 255
 102:	3f 4f       	sbci	r19, 0xFF	; 255
 104:	24 36       	cpi	r18, 0x64	; 100
 106:	31 05       	cpc	r19, r1
 108:	ac f3       	brlt	.-22     	; 0xf4 <main+0x2e>
		{
			
		}
	}
	
	elapsed_time = 65536 * overflowCount + (uint32_t) TCNT1 ;
 10a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 10e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 112:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 116:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 11a:	8c b5       	in	r24, 0x2c	; 44
 11c:	9d b5       	in	r25, 0x2d	; 45
	//65536 = 2^16
    
	cli();
 11e:	f8 94       	cli
}
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	08 95       	ret

00000126 <_exit>:
 126:	f8 94       	cli

00000128 <__stop_program>:
 128:	ff cf       	rjmp	.-2      	; 0x128 <__stop_program>
