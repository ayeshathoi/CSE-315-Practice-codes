
negEdge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000013a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000013a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000624  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000583  00000000  00000000  000007ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c6  00000000  00000000  00000d6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001038  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000372  00000000  00000000  0000105c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000087  00000000  00000000  000013ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001455  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 71 00 	jmp	0xe2	; 0xe2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>

int main(void)

{
	DDRB   = 0xFB;
  6c:	8b ef       	ldi	r24, 0xFB	; 251
  6e:	87 bb       	out	0x17, r24	; 23
	DDRD   = 0xFB;
  70:	81 bb       	out	0x11, r24	; 17
	DDRA   = 0xFF;
  72:	8f ef       	ldi	r24, 0xFF	; 255
  74:	8a bb       	out	0x1a, r24	; 26
	PORTA  = 0x00;
  76:	1b ba       	out	0x1b, r1	; 27
	unsigned char counter = 0;

	int old_inputB = 1;
	int old_inputD = 1;
	PINB = 0 ;
  78:	16 ba       	out	0x16, r1	; 22
	PIND = 0;
  7a:	10 ba       	out	0x10, r1	; 16


	PORTA  = counter;
  7c:	1b ba       	out	0x1b, r1	; 27
	DDRA   = 0xFF;
	PORTA  = 0x00;
	unsigned char counter = 0;

	int old_inputB = 1;
	int old_inputD = 1;
  7e:	41 e0       	ldi	r20, 0x01	; 1
  80:	50 e0       	ldi	r21, 0x00	; 0
	DDRD   = 0xFB;
	DDRA   = 0xFF;
	PORTA  = 0x00;
	unsigned char counter = 0;

	int old_inputB = 1;
  82:	21 e0       	ldi	r18, 0x01	; 1
  84:	30 e0       	ldi	r19, 0x00	; 0
{
	DDRB   = 0xFB;
	DDRD   = 0xFB;
	DDRA   = 0xFF;
	PORTA  = 0x00;
	unsigned char counter = 0;
  86:	80 e0       	ldi	r24, 0x00	; 0

	PORTA  = counter;
	while (1)
	{

		if((PINB & 0x04) == 0 && old_inputB == 1)
  88:	b2 99       	sbic	0x16, 2	; 22
  8a:	05 c0       	rjmp	.+10     	; 0x96 <main+0x2a>
  8c:	21 30       	cpi	r18, 0x01	; 1
  8e:	31 05       	cpc	r19, r1
  90:	21 f0       	breq	.+8      	; 0x9a <main+0x2e>
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	03 c0       	rjmp	.+6      	; 0x9c <main+0x30>
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	01 c0       	rjmp	.+2      	; 0x9c <main+0x30>
  9a:	91 e0       	ldi	r25, 0x01	; 1
  9c:	99 23       	and	r25, r25
  9e:	11 f0       	breq	.+4      	; 0xa4 <main+0x38>
		{
			counter--;
  a0:	81 50       	subi	r24, 0x01	; 1
			PORTA = counter;
  a2:	8b bb       	out	0x1b, r24	; 27

		}
		if((PIND & 0x04) ==0 && old_inputD == 1)
  a4:	82 99       	sbic	0x10, 2	; 16
  a6:	05 c0       	rjmp	.+10     	; 0xb2 <main+0x46>
  a8:	41 30       	cpi	r20, 0x01	; 1
  aa:	51 05       	cpc	r21, r1
  ac:	21 f0       	breq	.+8      	; 0xb6 <main+0x4a>
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	03 c0       	rjmp	.+6      	; 0xb8 <main+0x4c>
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <main+0x4c>
  b6:	91 e0       	ldi	r25, 0x01	; 1
  b8:	99 23       	and	r25, r25
  ba:	11 f0       	breq	.+4      	; 0xc0 <main+0x54>
		{
			counter++;
  bc:	8f 5f       	subi	r24, 0xFF	; 255
			PORTA = counter;
  be:	8b bb       	out	0x1b, r24	; 27
		}

		old_inputB = ((PINB >> 2) & 1);
  c0:	96 b3       	in	r25, 0x16	; 22
  c2:	92 fb       	bst	r25, 2
  c4:	22 27       	eor	r18, r18
  c6:	20 f9       	bld	r18, 0
  c8:	30 e0       	ldi	r19, 0x00	; 0

		old_inputD = ((PIND >> 2) & 1);
  ca:	90 b3       	in	r25, 0x10	; 16
  cc:	92 fb       	bst	r25, 2
  ce:	44 27       	eor	r20, r20
  d0:	40 f9       	bld	r20, 0
  d2:	50 e0       	ldi	r21, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	e7 e8       	ldi	r30, 0x87	; 135
  d6:	f3 e1       	ldi	r31, 0x13	; 19
  d8:	31 97       	sbiw	r30, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <main+0x6c>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x72>
  de:	00 00       	nop
  e0:	d3 cf       	rjmp	.-90     	; 0x88 <main+0x1c>

000000e2 <_exit>:
  e2:	f8 94       	cli

000000e4 <__stop_program>:
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <__stop_program>
